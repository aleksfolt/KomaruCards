import json
import random
import time
import os
import logging
from os import path
from datetime import datetime, timedelta
from telebot.async_telebot import AsyncTeleBot
from telebot import types
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import aiohttp
import asyncio
import telebot

bot = AsyncTeleBot("7409912773:AAH6zKcL5S0hAyLfr5KcUQC0bRgYtmEsxg0")


async def config_func():
  with open('config.json', 'r', encoding='utf-8') as file:
      data = json.load(file)
  return data

user_button = {}

async def load_data_cards():
  try:
      with open("komaru_user_cards.json", 'r') as f:
          return json.load(f)
  except Exception as e:
      print(e)
      return {}

async def save_data(data):
  try:
      with open("komaru_user_cards.json", 'w') as f:
          json.dump(data, f)
  except Exception as e:
      print(e)

async def user_profile(message):
  user_id = message.from_user.id
  first_name = message.from_user.first_name
  last_name = message.from_user.last_name or ""
  data = await load_data_cards()
  user_data = data.get(str(user_id), {'cats': [], 'last_usage': 0, 'points': 0, 'nickname': first_name})
  collected_cards = len(user_data['cats'])
  total_cards = len(cats)
  user_profile_photos = await bot.get_user_profile_photos(user_id, limit=1)
  if user_profile_photos.photos:
      photo = user_profile_photos.photos[0][-1]
      file_id = photo.file_id

      current_datetime = message.date
      user_folder = os.path.join('path_to_save', f'user_{user_id}', str(current_datetime))
      os.makedirs(user_folder, exist_ok=True)

      downloaded_file_path = os.path.join(user_folder, f'{user_id}_profile_pic.jpg')
      file_info = await bot.get_file(file_id)
      with open(downloaded_file_path, 'wb') as new_file:
          new_file.write(await bot.download_file(file_info.file_path))
  else:
      downloaded_file_path = 'avatar.jpg'

  caption = (
      f"–ü—Ä–∏–≤–µ—Ç {first_name} {last_name}!\n\n"
      f"üè° –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:\n"
      f"üÉè –°–æ–±—Ä–∞–Ω–æ {collected_cards} –∏–∑ {total_cards} –∫–∞—Ä—Ç–æ—á–µ–∫\n"
      f"üí∞ –û—á–∫–∏: {user_data['points']}\n"
      f"üìù –ù–∏–∫: {user_data['nickname']}"
  )
  unique_number = random.randint(1000, 1000000000000000000000)
  user_button[user_id] = unique_number
  keyboard = telebot.types.InlineKeyboardMarkup(row_width=2)
  button_1 = telebot.types.InlineKeyboardButton(text="–ú–æ–∏ –∫–∞—Ä—Ç–æ—á–∫–∏", callback_data=f'show_cards_{unique_number}')
  button_2 = telebot.types.InlineKeyboardButton(text="–¢–æ–ø –∫–∞—Ä—Ç–æ—á–µ–∫", callback_data=f'top_komaru_{unique_number}')
  keyboard.add(button_1, button_2)
  await bot.send_photo(message.chat.id, photo=open(downloaded_file_path, 'rb'), caption=caption, reply_markup=keyboard)

last_request_time = {}

async def komaru_cards_function(message):
  user_id = str(message.from_user.id)
  user_nickname = message.from_user.first_name
  current_time = time.time()
  if user_id in last_request_time and (current_time - last_request_time[user_id]) < 0.3:
      bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º.")
      return
    
  last_request_time[user_id] = current_time
  
  data = await load_data_cards()
  user_data = data.get(user_id, {'cats': [], 'last_usage': 0, 'points': 0, 'nickname': user_nickname})
  user_data['points'] = int(user_data['points'])
  time_since_last_usage = time.time() - user_data['last_usage']
  time_left = max(0, 14400 - time_since_last_usage)

  if time_since_last_usage < 14400:
      remaining_time = 14400 - time_since_last_usage
      remaining_hours = int(remaining_time // 3600)
      remaining_minutes = int((remaining_time % 3600) // 60)
      remaining_seconds = int(remaining_time % 60)
      await bot.reply_to(message, f"–í—ã –æ—Å–º–æ—Ç—Ä–µ–ª–∏—Å—å, –Ω–æ –Ω–µ —É–≤–∏–¥–µ–ª–∏ —Ä—è–¥–æ–º –Ω–∏ –æ–¥–Ω–æ–≥–æ –ö–æ–º–∞—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ {remaining_hours} —á–∞—Å–æ–≤ {remaining_minutes} –º–∏–Ω—É—Ç {remaining_seconds} —Å–µ–∫—É–Ω–¥.")
      return

  random_number = random.randint(1, 95)
  if 0 <= random_number <= 14:
      eligible_cats = [cat for cat in cats if cat["rarity"] == "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è"]
  elif 15 <= random_number <= 29:
      eligible_cats = [cat for cat in cats if cat["rarity"] == "–ú–∏—Ñ–∏—á–µ—Å–∫–∞—è"]
  elif 30 <= random_number <= 49:
      eligible_cats = [cat for cat in cats if cat["rarity"] == "–°–≤–µ—Ä—Ö—Ä–µ–¥–∫–∞—è"]
  elif 50 <= random_number <= 95:
      eligible_cats = [cat for cat in cats if cat["rarity"] == "–†–µ–¥–∫–∞—è"]

  if eligible_cats:
      chosen_cat = random.choice(eligible_cats)
      photo_data = chosen_cat['photo']
      if chosen_cat['name'] in user_data['cats']:
          with open(photo_data, 'rb') as photo_file:
              await bot.send_photo(message.chat.id, photo_file, caption=f"–í—ã –æ—Å–º–æ—Ç—Ä–µ–ª–∏—Å—å –≤–æ–∫—Ä—É–≥ –∏ —Å–Ω–æ–≤–∞ —É–≤–∏–¥–µ–ª–∏ {chosen_cat['name']}! –ë—É–¥—É—Ç –Ω–∞—á–∏—Å–ª–µ–Ω—ã —Ç–æ–ª—å–∫–æ –æ—á–∫–∏.\n–†–µ–¥–∫–æ—Å—Ç—å: {chosen_cat['rarity']}\n+{chosen_cat['points']} –æ—á–∫–æ–≤.\n\n–í—Å–µ–≥–æ –ø–æ–∏–Ω—Ç–æ–≤: {user_data['points'] + int(chosen_cat['points'])}")
          user_data['points'] += int(chosen_cat['points'])
      else:
          with open(photo_data, 'rb') as photo_file:
              await bot.send_photo(message.chat.id, photo_file, caption=f"–í—ã –æ—Å–º–æ—Ç—Ä–µ–ª–∏—Å—å –≤–æ–∫—Ä—É–≥ –∏ —É–≤–∏–¥–µ–ª–∏ {chosen_cat['name']}!\n–†–µ–¥–∫–æ—Å—Ç—å: {chosen_cat['rarity']}\n–û—á–∫–∏: {chosen_cat['points']}\n\n–í—Å–µ–≥–æ –ø–æ–∏–Ω—Ç–æ–≤: {user_data['points'] + int(chosen_cat['points'])}")
          user_data['cats'].append(chosen_cat['name'])
          user_data['points'] += int(chosen_cat['points'])
      user_data['last_usage'] = time.time()
      data[user_id] = user_data
      await save_data(data)

@bot.callback_query_handler(func=lambda call: call.data.startswith('show_cards'))
async def show_knock_cards(call):
  user_id = str(call.from_user.id)
  user_id_notstr = call.from_user.id
  user_nickname = call.from_user.first_name
  unique_number = int(call.data.split('_')[-1])
  if user_button.get(user_id_notstr) != unique_number:
      await bot.answer_callback_query(call.id, "–ù–µ –≤–∞—à–∞ –∫–Ω–æ–ø–∫–∞.", show_alert=True)
      return
  data = await load_data_cards()
  user_data = data.get(user_id, {'cats': [], 'last_usage': 0, 'points': 0, 'nickname': user_nickname})
  collected_cards = len(user_data['cats'])
  total_cards = len(cats)
  if user_data['cats']:
      cats_owned_by_user = {cat['name'] for cat in cats if cat['name'] in user_data['cats']}
      rarities = {cat['rarity'] for cat in cats if cat['name'] in cats_owned_by_user}
      keyboard = types.InlineKeyboardMarkup(row_width=1)
      for rarity in rarities:
          keyboard.add(types.InlineKeyboardButton(text=rarity, callback_data=f'show_{rarity}'))
      try:
          await bot.send_message(call.from_user.id, f"–£ –≤–∞—Å —Å–æ–±—Ä–∞–Ω–æ {collected_cards} –∏–∑ {total_cards} –≤–æ–∑–º–æ–∂–Ω—ã—Ö\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–¥–∫–æ—Å—Ç—å:", reply_markup=keyboard)
          chat_type = call.message.chat.type
          if chat_type in ['group', 'supergroup']:
              await bot.send_message(call.message.chat.id, f"{call.from_user.first_name}, –∫–∞—Ä—Ç–æ—á–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤–∞–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è!")
          else:
              pass
      except telebot.apihelper.ApiException as e:
          logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {str(e)}")
          await bot.send_message(call.message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É —á—Ç–æ-—Ç–æ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–º –∫–∞—Ä—Ç–æ—á–∫–∏!")
  else:
      await bot.send_message(call.message.chat.id, "–í—ã –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –Ω–∞–±–ª—é–¥–∞–ª–∏ –∑–∞ –ø—Ç–∏—á–∫–∞–º–∏.")

@bot.callback_query_handler(func=lambda call: call.data.startswith('show_'))
async def show_cards(call):
  rarity = call.data[len('show_'):]
  user_id = str(call.from_user.id)
  user_nickname = call.from_user.first_name
  data = await load_data_cards()
  user_data = data.get(user_id, {'cats': [], 'last_usage': 0, 'points': 0, 'nickname': user_nickname})
  rarity_cards = [cat for cat in cats if cat['name'] in user_data['cats'] and cat['rarity'] == rarity]

  if rarity_cards:
      for cat in rarity_cards:
          photo_data = cat['photo']
          caption = f"{cat['name']}\n–†–µ–¥–∫–æ—Å—Ç—å: {cat['rarity']}"
          if 'points' in cat:
              caption += f"\n–û—á–∫–∏: {cat['points']}"
          with open(photo_data, 'rb') as photo_file:
              chat_type = call.message.chat.type
              await bot.send_photo(call.message.chat.id, photo_file, caption=caption)
  else:
      await bot.send_message(call.message.chat.id, f"–£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ —Ä–µ–¥–∫–æ—Å—Ç–∏ {rarity}")

@bot.callback_query_handler(func=lambda call: call.data.startswith('top_komaru'))
async def top_komaru(call):
  user_id = call.from_user.id
  unique_number = int(call.data.split('_')[-1])
  if user_button.get(user_id) != unique_number:
      await bot.answer_callback_query(call.id, "–ù–µ –≤–∞—à–∞ –∫–Ω–æ–ø–∫–∞.", show_alert=True)
      return
  keyboard = telebot.types.InlineKeyboardMarkup(row_width=2)
  button_1 = telebot.types.InlineKeyboardButton(text="–¢–æ–ø –ø–æ –∫–∞—Ä—Ç–æ—á–∫–∞–º", callback_data=f'top_cards_cards')
  button_2 = telebot.types.InlineKeyboardButton(text="–¢–æ–ø –ø–æ –æ—á–∫–∞–º", callback_data=f'top_cards_point')
  keyboard.add(button_1, button_2)
  await bot.send_message(call.message.chat.id, "–¢–æ–ø 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–∞—Ä—Ç–æ—á–∫–∞–º. –í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É:", reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data.startswith('top_cards_'))
async def cards_top_callback(call):
    choice = call.data.split('_')[2]
    data = await load_data_cards()
    user_id = str(call.from_user.id)
    user_data = data.get(user_id, {'points': 0, 'cats': []})
    message_text = ""

    if choice == "cards":
        sorted_data = sorted(data.items(), key=lambda x: len(x[1].get('birds', [])), reverse=True)
        top_10 = sorted_data[:10]

        message_text = "–¢–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫:\n\n"
        for i, (user_id, user_data) in enumerate(top_10, 1):
            nickname = user_data.get('nickname', 'Unknown')
            num_cards = len(user_data.get('cats', []))
            message_text += f"{i}. {nickname}: {num_cards} –∫–∞—Ä—Ç–æ—á–µ–∫\n"

    elif choice == "point":
        sorted_data_points = sorted(data.items(), key=lambda x: x[1].get('points', 0), reverse=True)
        top_10 = sorted_data_points[:10]

        message_text = "–¢–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –Ω–∞–±—Ä–∞–Ω–Ω—ã—Ö –æ—á–∫–æ–≤:\n\n"
        for j, (user_id, user_data) in enumerate(top_10, 1):
            nickname_2 = user_data.get('nickname', 'Unknown')
            points = user_data.get('points', 0)
            message_text += f"{j}. {nickname_2}: {points} –æ—á–∫–æ–≤\n"

    if not message_text:
        message_text = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    await bot.delete_message(call.message.chat.id, call.message.message_id)

    await bot.send_message(call.message.chat.id, message_text)

def registr(s):
  for i in range(len(s)):
      if s[i].isupper():
          s = s[:i] + s[i].lower() + s[i+1:]
  return s

@bot.message_handler(commands=['start'])
async def start(message):
  if message.chat.type == 'private':
      markup = types.InlineKeyboardMarkup()
      add_bot_button = types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É", url=f"https://t.me/KomaruCardsBot?startgroup=iris&admin=change_info+restrict_members+delete_messages+pin_messages+invite_users")
      markup.add(add_bot_button)
      await bot.send_message(message.chat.id, (
          "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ Komaru!\n\n"
          '''–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–±–∏—Ä–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–æ–º–∞—Ä—É –∏ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç—Å—è —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏.\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞–ø–∏—à–∏ "<code>–ö–æ–º–∞—Ä—É</code>"\n'''
          "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.\n\n"
          "‚û°Ô∏è –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É:"
      ), parse_mode='HTML', reply_markup=markup)
  elif message.chat.type in ['group', 'supergroup']:
      await bot.send_message(message.chat.id, (
          "üëã Komaru –±–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!\n\n"
          '''–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–±–∏—Ä–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–æ–º–∞—Ä—É –∏ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç—Å—è —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏.\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞–ø–∏—à–∏ "<code>–ö–æ–º–∞—Ä—É</code>"\n\n'''
          "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–¥–∞—Ö."
      ), parse_mode='HTML')

@bot.message_handler(commands=['help'])
async def help(message):
    help_text = (
        "<b>Komaru Bot</b> - –í–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ —Å–±–æ—Ä–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –∫–æ–º–∞—Ä—É\n\n"
        "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å\n"
        "/profile, '–ø—Ä–æ—Ñ–∏–ª—å', '–∫–æ–º–∞—Ä—É –ø—Ä–æ—Ñ–∏–ª—å' - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å\n"
        "'–∫–æ–º–∞—Ä—É', '–ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É', '–∫–∞–º–∞—Ä' - –ò—Å–∫–∞—Ç—å –∫–æ—Ç–æ–≤ –∏ —Å–æ–±–∏—Ä–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏\n"
    )
    await bot.send_message(message.chat.id, help_text, parse_mode='HTML')


@bot.message_handler(commands=['admin_send_files'])
def handle_send_files(message):
    try:
        user_id = message.from_user.id
        if user_id != 1130692453 and user_id != 1268026433:
            bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!")
            return
        filenames = message.text.split()[1:]
        if len(filenames) == 0:
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
            return
        send_files(message.chat.id, filenames)
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞: {e}")
        print(f"–û—à–∏–±–∫–∞: {e}")

def send_files(chat_id, filenames):
    try:
        for filename in filenames:
            with open(filename, 'rb') as file:
                bot.send_document(chat_id, file)
    except Exception as e:
        bot.send_message(chat_id, f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª {filename}: {e}")
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª {filename}: {e}")


@bot.message_handler(func=lambda message: True)
async def handle_text(message):
  try:
      text = registr(message.text)
      if text in ["–∫–æ–º–∞—Ä—É", "–ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É", "–∫–∞–º–∞—Ä"]:
          await komaru_cards_function(message)
      elif text in ["/profile", "–ø—Ä–æ—Ñ–∏–ª—å", "–∫–æ–º–∞—Ä—É –ø—Ä–æ—Ñ–∏–ª—å"]:
          await user_profile(message)
  except Exception as e:
      await bot.send_message(message.chat.id, "–í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.")
      await bot.send_message(1130692453, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã: –≤ —á–∞—Ç–µ: {message.chat.id}. –û—à–∏–±–∫–∞: {e}")
      await bot.send_message(1268026433, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã: –≤ —á–∞—Ç–µ: {message.chat.id}. –û—à–∏–±–∫–∞: {e}")
      await bot.send_message(-1002202469628, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã: –≤ —á–∞—Ç–µ: {message.chat.id}. –û—à–∏–±–∫–∞: {e}")

async def main():
  config_data = await config_func()
  global cats
  cats = config_data['cats']
  await bot.infinity_polling()

import asyncio
if __name__ == "__main__":
  asyncio.run(main())
