# -*- coding: utf-8 -*-
import json
import random
import time
import os
import logging
from os import path
from datetime import datetime, timedelta
from telebot.async_telebot import AsyncTeleBot
from telebot import types
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, LabeledPrice
import aiohttp
import asyncio
import telebot
from aiocryptopay import AioCryptoPay, Networks
import aiofiles
import emoji

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
crypto = AioCryptoPay(token='205872:AAN4Wj4SoVxVqtjBhfnXqQ1POMYCANkAuV8', network=Networks.MAIN_NET)
bot = AsyncTeleBot("7409912773:AAGLCpIH6TyjhrQzNSedFo7e6USf1RFXF5w")

user_button = {}
button_ids = {}


async def config_func():
    async with aiofiles.open('config.json', 'r', encoding='utf-8') as file:
        data = json.loads(await file.read())
    return data


if not path.exists("premium_users.json"):
    with open("premium_users.json", 'w') as f:
        json.dump({}, f)

if not path.exists("komaru_user_cards.json"):
    with open("komaru_user_cards.json", 'w') as f:
        json.dump({}, f)

responses = [
    "–£–±–µ—Ä–∏—Ç–µ –ª–∞–ø–∫–∏ –æ—Ç —á—É–∂–æ–π –∫–Ω–æ–ø–∫–∏.",
    "–õ–∞–ø–∫–∏ –≤–≤–µ—Ä—Ö, –≤—ã –∞—Ä–µ—Å—Ç–æ–≤–∞–Ω—ã!",
    "–í–∞—à–∏ –ª–∞–ø–∫–∏ –Ω–µ –¥–ª—è —ç—Ç–æ–π –∫–Ω–æ–ø–∫–∏.",
    "–õ–∞–ø–∫–∏ –ø—Ä–æ—á—å –æ—Ç —ç—Ç–æ–π –∫–Ω–æ–ø–∫–∏!",
    "–í–∞—à–∏ –ª–∞–ø–∫–∏ –∑–¥–µ—Å—å –ª–∏—à–Ω–∏–µ."
]


async def save_data(data):
    try:
        async with aiofiles.open("komaru_user_cards.json", 'w') as f:
            await f.write(json.dumps(data, ensure_ascii=False, indent=4))
        logging.info("Data successfully saved.")
    except Exception as e:
        logging.error(f"Failed to save data: {e}")


async def load_data_cards():
    try:
        async with aiofiles.open("komaru_user_cards.json", 'r') as f:
            return json.loads(await f.read())
    except Exception as e:
        logging.error(f"Failed to load data: {e}")
        return {}


async def get_titul(card_count, user_id):
    if user_id in [1130692453, 1268026433]:
        return "–°–æ–∑–¥–∞—Ç–µ–ª—å"
    if user_id in [1497833411, 6679727618, 5872877426]:
        return "–õ–æ—Ö"
    if card_count > 500:
        return "–ú–∞—Å—Ç–µ—Ä –∫–∞—Ä—Ç–æ—á–µ–∫"
    elif card_count > 250:
        return "–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä"
    elif card_count > 150:
        return '–≠–∫—Å–ø–µ—Ä—Ç –∫–∞—Ä—Ç–æ—á–µ–∫'
    elif card_count > 100:
        return '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä'
    elif card_count > 50:
        return '–õ—é–±–∏—Ç–µ–ª—å –ö–æ–º–∞—Ä—É'
    elif card_count > 20:
        return '–ù–∞—á–∏–Ω–∞—é—â–∏–π –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä'
    else:
        return '–ù–æ–≤–∏—á–æ–∫'


async def user_profile(message):
    user_id = message.from_user.id
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name or ""
    data = await load_data_cards()
    user_data = data.get(str(user_id),
                         {'cats': [], 'last_usage': 0, 'points': 0, 'nickname': first_name, 'card_count': 0})
    card_count = user_data.get('card_count', 0)
    favorite_card = user_data.get('love_card', '–ù–µ –≤—ã–±—Ä–∞–Ω–∞')
    titul = await get_titul(card_count, user_id)

    collected_cards = len(user_data['cats'])
    total_cards = len(cats)

    premium_status, premium_expiration = await check_and_update_premium_status(user_id)
    premium_message = f"–ü—Ä–µ–º–∏—É–º: –∞–∫—Ç–∏–≤–µ–Ω –¥–æ {premium_expiration}" if premium_status else "–ü—Ä–µ–º–∏—É–º: –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω"

    try:
        user_profile_photos = await bot.get_user_profile_photos(user_id, limit=1)
        if user_profile_photos.photos:
            photo = user_profile_photos.photos[0][-1]
            file_id = photo.file_id

            file_info = await bot.get_file(file_id)
            downloaded_file = await bot.download_file(file_info.file_path)

            photo_cache = downloaded_file
        else:
            with open('avatar.jpg', 'rb') as f:
                photo_cache = f.read()

        caption = (
            f"–ü—Ä–∏–≤–µ—Ç {user_data['nickname']}!\n\n"
            f"üè° –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:\n"
            f"üÉè –°–æ–±—Ä–∞–Ω–æ {collected_cards} –∏–∑ {total_cards} –∫–∞—Ä—Ç–æ—á–µ–∫\n"
            f"üí∞ –û—á–∫–∏: {user_data['points']}\n"
            f"üéñÔ∏è –¢–∏—Ç—É–ª: {titul}\n"
            f"üíñ –õ—é–±–∏–º–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞: {favorite_card}\n"
            f"üåü {premium_message}"
        )

        unique_id = str(random.randint(100000, 999999))
        user_button[unique_id] = user_id
        keyboard = telebot.types.InlineKeyboardMarkup(row_width=2)
        button_1 = telebot.types.InlineKeyboardButton(text="üÉè –ú–æ–∏ –∫–∞—Ä—Ç–æ—á–∫–∏", callback_data=f'show_cards_{unique_id}')
        button_2 = telebot.types.InlineKeyboardButton(text="üÄÑÔ∏è –¢–æ–ø –∫–∞—Ä—Ç–æ—á–µ–∫", callback_data=f'top_komaru_{unique_id}')
        button_3 = telebot.types.InlineKeyboardButton(text="üíé –ü—Ä–µ–º–∏—É–º", callback_data=f'premium_callback_{unique_id}')
        keyboard.add(button_1, button_2, button_3)
        await bot.send_photo(message.chat.id, photo=photo_cache, caption=caption, reply_markup=keyboard)
    except telebot.apihelper.ApiException as e:
        if "bot was blocked by the user" in str(e):
            await bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–π—Ç–µ –±–æ—Ç–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–∞—à–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é.")
        else:
            await bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ –≤–∞—à–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def komaru_cards_function(call):
    if await last_time_usage(call.from_user.id):
        user_id = str(call.from_user.id)
        user_nickname = call.from_user.first_name
        await register_user_and_group_async(call.message)
    
        data = await load_data_cards()
        user_data = data.get(user_id, {'cats': [], 'last_usage': 0, 'points': 0, 'nickname': user_nickname, 'card_count': 0,
                                       'all_points': 0})
    
        if 'card_count' not in user_data:
            user_data['card_count'] = 0
    
        if 'all_points' not in user_data:
            user_data['all_points'] = 0
    
        user_data['points'] = int(user_data['points'])
        time_since_last_usage = time.time() - user_data['last_usage']
    
        premium_status, _ = await check_and_update_premium_status(user_id)
        wait_time = 14400 if not premium_status else 10800
    
        if time_since_last_usage < wait_time:
            remaining_time = wait_time - time_since_last_usage
            remaining_hours = int(remaining_time // 3600)
            remaining_minutes = int((remaining_time % 3600) // 60)
            remaining_seconds = int(remaining_time % 60)
            await bot.send_message(call.message.chat.id,
                                   f"{call.from_user.first_name}, –≤—ã –æ—Å–º–æ—Ç—Ä–µ–ª–∏—Å—å, –Ω–æ –Ω–µ —É–≤–∏–¥–µ–ª–∏ —Ä—è–¥–æ–º –ö–æ–º–∞—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ {remaining_hours} —á–∞—Å–æ–≤ {remaining_minutes} –º–∏–Ω—É—Ç {remaining_seconds} —Å–µ–∫—É–Ω–¥.")
            return
    
        random_number = random.randint(1, 95)
        if premium_status:
            if 0 <= random_number <= 19:
                eligible_cats = [cat for cat in cats if cat["rarity"] == "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è"]
            elif 20 <= random_number <= 34:
                eligible_cats = [cat for cat in cats if cat["rarity"] == "–ú–∏—Ñ–∏—á–µ—Å–∫–∞—è"]
        else:
            if 0 <= random_number <= 14:
                eligible_cats = [cat for cat in cats if cat["rarity"] == "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è"]
            elif 15 <= random_number <= 29:
                eligible_cats = [cat for cat in cats if cat["rarity"] == "–ú–∏—Ñ–∏—á–µ—Å–∫–∞—è"]
    
        if 30 <= random_number <= 49:
            eligible_cats = [cat for cat in cats if cat["rarity"] == "–°–≤–µ—Ä—Ö—Ä–µ–¥–∫–∞—è"]
        elif 50 <= random_number <= 95:
            eligible_cats = [cat for cat in cats if cat["rarity"] == "–†–µ–¥–∫–∞—è"]
    
        if eligible_cats:
            chosen_cat = random.choice(eligible_cats)
            photo_data = chosen_cat['photo']
            if chosen_cat['name'] in user_data['cats']:
                await bot.send_photo(call.message.chat.id, photo_data,
                                     caption=f"‚ú®{call.from_user.first_name}, –≤—ã –æ—Å–º–æ—Ç—Ä–µ–ª–∏—Å—å –≤–æ–∫—Ä—É–≥ –∏ —Å–Ω–æ–≤–∞ —É–≤–∏–¥–µ–ª–∏ {chosen_cat['name']}! ‚ú®\n–ë—É–¥—É—Ç –Ω–∞—á–∏—Å–ª–µ–Ω—ã —Ç–æ–ª—å–∫–æ –æ—á–∫–∏.\n\nüé≤ –†–µ–¥–∫–æ—Å—Ç—å: {chosen_cat['rarity']}\nüíØ +{chosen_cat['points']} –æ—á–∫–æ–≤.\nüåü –í—Å–µ–≥–æ –ø–æ–∏–Ω—Ç–æ–≤: {user_data['points'] + int(chosen_cat['points'])}")
                user_data['points'] += int(chosen_cat['points'])
                user_data['all_points'] += int(chosen_cat['points'])
            else:
                await bot.send_photo(call.message.chat.id, photo_data,
                                     caption=f"‚ú®{call.from_user.first_name}, –≤—ã –æ—Å–º–æ—Ç—Ä–µ–ª–∏—Å—å –≤–æ–∫—Ä—É–≥ –∏ —É–≤–∏–¥–µ–ª–∏.. {chosen_cat['name']}! ‚ú®\n\nüé≤ –†–µ–¥–∫–æ—Å—Ç—å: {chosen_cat['rarity']}\nüíØ –û—á–∫–∏: {chosen_cat['points']}\nüåü –í—Å–µ–≥–æ –ø–æ–∏–Ω—Ç–æ–≤: {user_data['points'] + int(chosen_cat['points'])}")
                user_data['cats'].append(chosen_cat['name'])
                user_data['points'] += int(chosen_cat['points'])
                user_data['all_points'] += int(chosen_cat['points'])
                user_data['card_count'] += 1
            user_data['last_usage'] = time.time()
            data[user_id] = user_data
            await save_data(data)
            await bot.delete_message(call.message.chat.id, call.message.message_id)


async def promo(message):
    try:
        promo_code = message.text[6:]
        async with aiofiles.open("promo.json", 'r') as f:
            promo_data = json.loads(await f.read())

        data = promo_data.get(promo_code)
        if not data:
            await bot.send_message(message.chat.id, "–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        user_id = message.from_user.id
        current_time = time.time()

        if current_time > data['until']:
            markup = InlineKeyboardMarkup()
            subscribe_button = InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url="https://t.me/komaru_updates")
            markup.add(subscribe_button)
            await bot.send_message(message.chat.id,
                                   "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏—Å—Ç–µ–∫. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å –Ω–æ–≤—ã–µ –ø—Ä–æ–º–æ!",
                                   reply_markup=markup)
            return

        if data['activation_limit'] != -1 and data['activation_counts'] >= data['activation_limit']:
            markup = InlineKeyboardMarkup()
            subscribe_button = InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url="https://t.me/komaru_updates")
            markup.add(subscribe_button)
            await bot.send_message(message.chat.id,
                                   "–≠—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –±—ã–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å –Ω–æ–≤—ã–µ –ø—Ä–æ–º–æ!",
                                   reply_markup=markup)
            return

        try:
            chat_member = await bot.get_chat_member('@komaru_updates', user_id)
            if chat_member.status not in ['member', 'administrator', 'creator']:
                markup = InlineKeyboardMarkup()
                subscribe_button = InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url="https://t.me/komaru_updates")
                markup.add(subscribe_button)
                await bot.send_message(message.chat.id,
                                       "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫.",
                                       reply_markup=markup)
                return
        except telebot.apihelper.ApiException as e:
            await bot.send_message(1130692453, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ {e}")
            await bot.send_message(1268026433, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ {e}")

        if user_id in data['users']:
            markup = InlineKeyboardMarkup()
            subscribe_button = InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url="https://t.me/komaru_updates")
            markup.add(subscribe_button)
            await bot.send_message(message.chat.id,
                                   "–í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å –Ω–æ–≤—ã–µ –ø—Ä–æ–º–æ!",
                                   reply_markup=markup)
            return

        action = data['action'].split()
        if action[0] == 'give_prem':
            await activate_premium(user_id, int(action[1]))
            data['users'].append(user_id)
            data["activation_counts"] += 1

            async with aiofiles.open("promo.json", 'w') as f:
                await f.write(json.dumps(promo_data, ensure_ascii=False, indent=4))

            await bot.send_message(message.chat.id,
                                   f"–ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n–í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–µ–º–∏—É–º –Ω–∞ {int(action[1])} –¥–Ω–µ–π!")
        elif action[0] == "kd":
            data_komaru = await load_data_cards()
            if str(user_id) in data_komaru:
                user_data = data_komaru[str(user_id)]
                current_time = time.time()
                premium_status, _ = await check_and_update_premium_status(user_id)
                wait_time = 10800 if premium_status else 14400

                time_since_last_usage = current_time - user_data['last_usage']
                if time_since_last_usage < wait_time:
                    user_data['last_usage'] = 0
                    data_komaru[str(user_id)] = user_data
                    await save_data(data_komaru)
                    logging.info(f"Waiting time for user {user_id} has been reset.")
                    data['users'].append(user_id)
                    data["activation_counts"] += 1

                    async with aiofiles.open("promo.json", 'w') as f:
                        await f.write(json.dumps(promo_data, ensure_ascii=False, indent=4))

                    await bot.send_message(message.chat.id,
                                           "–ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n–í—ã –ø–æ–ª—É–∏–ª–∏ –æ–±–Ω—É–ª–µ–Ω–∏–µ –∫–¥ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É!")
                else:
                    await bot.send_message(message.chat.id,
                                           "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–∫—Ä–æ–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –∫–∞—Ä—Ç–æ—á–∫—É, –∞ –ø–æ—Ç–æ–º –∑–∞–Ω–æ–≤–æ –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥.")
            else:
                logging.warning(f"User {user_id} not found in the data.")
                await bot.send_message(message.chat.id,
                                       "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–∫—Ä–æ–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –∫–∞—Ä—Ç–æ—á–∫—É, –∞ –ø–æ—Ç–æ–º –∑–∞–Ω–æ–≤–æ –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥.")

    except Exception as e:
        logging.error(f"Error processing promo code: {e}")
        await bot.send_message(1130692453, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ {e}")
        await bot.send_message(1268026433, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ {e}")


@bot.callback_query_handler(func=lambda call: call.data.startswith('show_cards'))
async def show_knock_cards(call):
    unique_id = call.data.split('_')[-1]
    if unique_id not in user_button or user_button[unique_id] != call.from_user.id:
        await bot.answer_callback_query(call.id, random.choice(responses), show_alert=True)
        return
    user_id = str(call.from_user.id)
    user_nickname = call.from_user.first_name
    data = await load_data_cards()
    user_data = data.get(user_id,
                         {'cats': [], 'last_usage': 0, 'points': 0, 'nickname': user_nickname, 'card_count': 0})
    collected_cards = len(user_data['cats'])
    total_cards = len(cats)
    if user_data['cats']:
        cats_owned_by_user = {cat['name'] for cat in cats if cat['name'] in user_data['cats']}
        rarities = {cat['rarity'] for cat in cats if cat['name'] in cats_owned_by_user}
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        for rarity in rarities:
            callback_data = f'show_{rarity[:15]}'  # Truncate to 15 characters
            keyboard.add(types.InlineKeyboardButton(text=rarity, callback_data=callback_data))
        try:
            await bot.send_message(call.from_user.id,
                                   f"–£ –≤–∞—Å —Å–æ–±—Ä–∞–Ω–æ {collected_cards} –∏–∑ {total_cards} –≤–æ–∑–º–æ–∂–Ω—ã—Ö\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–¥–∫–æ—Å—Ç—å:",
                                   reply_markup=keyboard)
            chat_type = call.message.chat.type
            if chat_type in ['group', 'supergroup']:
                await bot.send_message(call.message.chat.id,
                                       f"{call.from_user.first_name}, –∫–∞—Ä—Ç–æ—á–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤–∞–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è!")
            else:
                pass
        except telebot.apihelper.ApiException as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {str(e)}")
            await bot.send_message(call.message.chat.id,
                                   "–ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É —á—Ç–æ-—Ç–æ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–º –∫–∞—Ä—Ç–æ—á–∫–∏!")
    else:
        await bot.answer_callback_query(call.id, "–í—ã –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –Ω–∞–±–ª—é–¥–∞–ª–∏ –∑–∞ –ø—Ç–∏—á–∫–∞–º–∏ (–≤ –ø–∞–º—è—Ç—å –æ birdy).",
                                        show_alert=True)


@bot.callback_query_handler(func=lambda call: call.data.startswith('show_'))
async def show_cards(call):
    try:
        rarity = call.data[len('show_'):]
        user_id = str(call.from_user.id)
        user_nickname = call.from_user.first_name
        data = await load_data_cards()
        user_data = data.get(user_id,
                             {'cats': [], 'last_usage': 0, 'points': 0, 'nickname': user_nickname, 'card_count': 0})
        rarity_cards = [cat for cat in cats if cat['name'] in user_data['cats'] and cat['rarity'].startswith(rarity)]

        if rarity_cards:
            first_card_index = 0
            if first_card_index < len(rarity_cards):
                await send_initial_card_with_navigation(call.message.chat.id, user_id, rarity, rarity_cards,
                                                        first_card_index)
        else:
            await bot.send_message(call.message.chat.id, f"–£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ —Ä–µ–¥–∫–æ—Å—Ç–∏ {rarity}")
    except Exception as e:
        logging.error(f"Error in show_cards: {e}")
        await bot.send_message(call.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫.")


async def send_initial_card_with_navigation(chat_id, user_id, rarity, rarity_cards, card_index):
    if card_index < len(rarity_cards):
        card = rarity_cards[card_index]
        photo_data = card['photo']
        caption = f"{card['name']}\n–†–µ–¥–∫–æ—Å—Ç—å: {card['rarity']}"
        if 'points' in card:
            caption += f"\n–û—á–∫–∏: {card['points']}"

        keyboard = types.InlineKeyboardMarkup(row_width=3)
        love_button = types.InlineKeyboardButton(text="‚ù§Ô∏è Love", callback_data=f'love_{user_id[:15]}_{card["id"]}')
        keyboard.add(love_button)
        if card_index > 0:
            prev_button = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥",
                                                     callback_data=f'navigate_{user_id[:15]}_prev_{card_index - 1}_{rarity[:15]}')
            keyboard.add(prev_button)
        if card_index < len(rarity_cards) - 1:
            next_button = types.InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥",
                                                     callback_data=f'navigate_{user_id[:15]}_next_{card_index + 1}_{rarity[:15]}')
            keyboard.add(next_button)

        await bot.send_photo(chat_id, photo_data, caption=caption, reply_markup=keyboard)
    else:
        logging.error(f"Card index {card_index} out of range for rarity cards")


async def send_card_with_navigation(chat_id, message_id, user_id, rarity, rarity_cards, card_index):
    if card_index < len(rarity_cards):
        card = rarity_cards[card_index]
        photo_data = card['photo']
        caption = f"{card['name']}\n–†–µ–¥–∫–æ—Å—Ç—å: {card['rarity']}"
        if 'points' in card:
            caption += f"\n–û—á–∫–∏: {card['points']}"

        keyboard = types.InlineKeyboardMarkup(row_width=3)
        love_button = types.InlineKeyboardButton(text="‚ù§Ô∏è Love", callback_data=f'love_{user_id[:15]}_{card["id"]}')
        keyboard.add(love_button)
        if card_index > 0:
            prev_button = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥",
                                                     callback_data=f'navigate_{user_id[:15]}_prev_{card_index - 1}_{rarity[:15]}')
            keyboard.add(prev_button)
        if card_index < len(rarity_cards) - 1:
            next_button = types.InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥",
                                                     callback_data=f'navigate_{user_id[:15]}_next_{card_index + 1}_{rarity[:15]}')
            keyboard.add(next_button)

        media = types.InputMediaPhoto(photo_data, caption=caption)
        await bot.edit_message_media(media, chat_id=chat_id, message_id=message_id, reply_markup=keyboard)
    else:
        logging.error(f"Card index {card_index} out of range for rarity cards")


@bot.callback_query_handler(func=lambda call: call.data.startswith('love_'))
async def handle_love_card(call):
    parts = call.data.split('_')
    user_id, card_id = parts[1], parts[2]
    data = await load_data_cards()
    user_data = data.get(user_id, {'cats': [], 'last_usage': 0, 'points': 0, 'nickname': '', 'love_card': ''})
    card_name = next((card['name'] for card in cats if card['id'] == card_id), None)
    if card_name:
        user_data['love_card'] = card_name
        data[user_id] = user_data
        await save_data(data)
        await bot.answer_callback_query(call.id, f"–ö–∞—Ä—Ç–æ—á–∫–∞ '{card_name}' —Ç–µ–ø–µ—Ä—å –≤–∞—à–∞ –ª—é–±–∏–º–∞—è!")
    else:
        await bot.answer_callback_query(call.id, "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫ —Å —Ç–∞–∫–∏–º ID.")


@bot.callback_query_handler(func=lambda call: call.data.startswith('navigate_'))
async def navigate_cards(call):
    try:
        parts = call.data.split('_')
        user_id = parts[1]
        direction = parts[2]
        new_index = int(parts[3])
        rarity = parts[4]

        data = await load_data_cards()
        user_data = data.get(user_id, {'cats': [], 'last_usage': 0, 'points': 0, 'nickname': ''})
        rarity_cards = [cat for cat in cats if cat['name'] in user_data['cats'] and cat['rarity'].startswith(rarity)]

        logging.info(f"Navigating to card {new_index} of {len(rarity_cards) - 1}")

        if 0 <= new_index < len(rarity_cards):
            await send_card_with_navigation(call.message.chat.id, call.message.message_id, user_id, rarity,
                                            rarity_cards, new_index)
        else:
            await bot.send_message(call.message.chat.id, "–ò–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç–æ—á–∫–∏ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.")
    except Exception as e:
        logging.error(f"Error in navigate_cards: {e}")
        await bot.send_message(call.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–∞–º.")


@bot.callback_query_handler(func=lambda call: call.data.startswith('top_komaru'))
async def top_komaru(call):
    unique_id = call.data.split('_')[-1]
    if unique_id not in user_button or user_button[unique_id] != call.from_user.id:
        await bot.answer_callback_query(call.id, random.choice(responses), show_alert=True)
        return
    keyboard = telebot.types.InlineKeyboardMarkup(row_width=2)
    button_1 = telebot.types.InlineKeyboardButton(text="üÉè –¢–æ–ø –ø–æ –∫–∞—Ä—Ç–æ—á–∫–∞–º",
                                                  callback_data=f'top_cards_cards_{unique_id}')
    button_2 = telebot.types.InlineKeyboardButton(text="üíØ –¢–æ–ø –ø–æ –æ—á–∫–∞–º", callback_data=f'top_cards_point_{unique_id}')
    button_3 = telebot.types.InlineKeyboardButton(text="‚åõÔ∏è –¢–æ–ø –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è",
                                                  callback_data=f'top_cards_all_{unique_id}')
    keyboard.add(button_1, button_2, button_3)
    await bot.send_message(call.message.chat.id, "–¢–æ–ø 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–∞—Ä—Ç–æ—á–∫–∞–º. –í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É:",
                           reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data.startswith('top_cards_'))
async def cards_top_callback(call):
    parts = call.data.split('_')
    choice = parts[2]
    unique_id = parts[-1]

    if unique_id not in user_button or user_button[unique_id] != call.from_user.id:
        await bot.answer_callback_query(call.id, random.choice(responses), show_alert=True)
        return

    data = await load_data_cards()
    user_id = str(call.from_user.id)
    user_data = data.get(user_id, {'cats': [], 'points': 0, 'all_points': 0})
    message_text = ""

    if choice == "cards":
        sorted_data = sorted(data.items(), key=lambda x: len(x[1].get('cats', [])), reverse=True)
        user_rank = next((i for i, item in enumerate(sorted_data, 1) if item[0] == user_id), None)
        top_10 = sorted_data[:10]

        message_text = "üèÜ –¢–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫:\n\n"
        for i, (uid, u_data) in enumerate(top_10, 1):
            nickname = u_data.get('nickname', 'Unknown')
            num_cards = len(u_data.get('cats', []))
            premium_status, _ = await check_and_update_premium_status(uid)
            premium_icon = "üíé" if premium_status else ""
            message_text += f"{i}. {premium_icon} {nickname}: {num_cards} –∫–∞—Ä—Ç–æ—á–µ–∫\n"

        if user_rank and user_rank > 10:
            message_text += f"\n–í–∞—à–µ –º–µ—Å—Ç–æ: {user_rank} ({data[user_id]['nickname']}: {len(user_data['cats'])} –∫–∞—Ä—Ç–æ—á–µ–∫)"

        keyboard = telebot.types.InlineKeyboardMarkup(row_width=2)
        button_2 = telebot.types.InlineKeyboardButton(text="üíØ –¢–æ–ø –ø–æ –æ—á–∫–∞–º",
                                                      callback_data=f'top_cards_point_{unique_id}')
        button_3 = telebot.types.InlineKeyboardButton(text="‚åõÔ∏è –¢–æ–ø –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è",
                                                      callback_data=f'top_cards_all_{unique_id}')
        keyboard.add(button_2, button_3)

    elif choice == "point":
        sorted_data_points = sorted(data.items(), key=lambda x: x[1].get('points', 0), reverse=True)
        user_rank_points = next((j for j, item in enumerate(sorted_data_points, 1) if item[0] == user_id), None)
        top_10 = sorted_data_points[:10]

        message_text = "üèÜ –¢–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –Ω–∞–±—Ä–∞–Ω–Ω—ã—Ö –æ—á–∫–æ–≤:\n\n"
        for j, (uid, u_data) in enumerate(top_10, 1):
            nickname_2 = u_data.get('nickname', 'Unknown')
            points = u_data.get('points', 0)
            premium_status, _ = await check_and_update_premium_status(uid)
            premium_icon = "üíé" if premium_status else ""
            message_text += f"{j}. {premium_icon} {nickname_2}: {points} –æ—á–∫–æ–≤\n"

        if user_rank_points and user_rank_points > 10:
            message_text += f"\n–í–∞—à–µ –º–µ—Å—Ç–æ: {user_rank_points} ({data[user_id]['nickname']}: {user_data['points']} –æ—á–∫–æ–≤)"

        keyboard = telebot.types.InlineKeyboardMarkup(row_width=2)
        button_1 = telebot.types.InlineKeyboardButton(text="üÉè –¢–æ–ø –ø–æ –∫–∞—Ä—Ç–æ—á–∫–∞–º",
                                                      callback_data=f'top_cards_cards_{unique_id}')
        button_3 = telebot.types.InlineKeyboardButton(text="‚åõ –¢–æ–ø –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è",
                                                      callback_data=f'top_cards_all_{unique_id}')
        keyboard.add(button_1, button_3)

    elif choice == "all":
        sorted_data = sorted(data.items(), key=lambda x: x[1].get('all_points', 0), reverse=True)
        user_rank_all = next((index for index, item in enumerate(sorted_data, 1) if item[0] == user_id), None)
        top_10 = sorted_data[:10]

        message_text = "üèÜ –¢–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –≤—Å–µ–º –≤—Ä–µ–º–µ–Ω–∞–º (–æ—á–∫–∏):\n\n"
        for index, (uid, u_data) in enumerate(top_10, 1):
            nickname = u_data.get('nickname', 'Unknown')
            premium_status, _ = await check_and_update_premium_status(uid)
            premium_icon = "üíé" if premium_status else ""
            total_points = u_data.get('all_points', 0)
            message_text += f"{index}. {premium_icon} {nickname}: {total_points} –æ—á–∫–æ–≤\n"

        if user_rank_all and user_rank_all > 10:
            message_text += f"\n–í–∞—à–µ –º–µ—Å—Ç–æ: {user_rank_all} ({data[user_id]['nickname']}: {user_data['all_points']} –æ—á–∫–æ–≤)"

        keyboard = telebot.types.InlineKeyboardMarkup(row_width=2)
        button_1 = telebot.types.InlineKeyboardButton(text="üÉè –¢–æ–ø –ø–æ –∫–∞—Ä—Ç–æ—á–∫–∞–º",
                                                      callback_data=f'top_cards_cards_{unique_id}')
        button_2 = telebot.types.InlineKeyboardButton(text="üíØ –¢–æ–ø –ø–æ –æ—á–∫–∞–º",
                                                      callback_data=f'top_cards_point_{unique_id}')
        keyboard.add(button_1, button_2)

    if not message_text:
        message_text = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=message_text,
                                reply_markup=keyboard)


def registr(s):
    for i in range(len(s)):
        if s[i].isupper():
            s = s[:i] + s[i].lower() + s[i + 1:]
    return s


async def start(message):
    if message.chat.type == 'private':
        markup = types.InlineKeyboardMarkup()
        add_bot_button = types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É",
                                                    url=f"https://t.me/KomaruCardsBot?startgroup=iris&admin=change_info+restrict_members+delete_messages+pin_messages+invite_users")
        markup.add(add_bot_button)
        await bot.send_message(message.chat.id, (
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ Komaru!\n\n"
            '''–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–±–∏—Ä–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–æ–º–∞—Ä—É –∏ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç—Å—è —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏.\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞–ø–∏—à–∏ "<code>–ö–æ–º–∞—Ä—É</code>"\n'''
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.\n\n"
            "‚û°Ô∏è –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É:"
        ), parse_mode='HTML', reply_markup=markup)
    elif message.chat.type in ['group', 'supergroup']:
        await bot.send_message(message.chat.id, (
            "üëã Komaru –±–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!\n\n"
            '''–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–±–∏—Ä–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–æ–º–∞—Ä—É –∏ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç—Å—è —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏.\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞–ø–∏—à–∏ "<code>–ö–æ–º–∞—Ä—É</code>"\n\n'''
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–¥–∞—Ö."
        ), parse_mode='HTML')


async def help(message):
    help_text = (
        "<b>Komaru Bot</b> - –í–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ —Å–±–æ—Ä–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –∫–æ–º–∞—Ä—É\n\n"
        "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å\n"
        "/profile, '–ø—Ä–æ—Ñ–∏–ª—å', '–∫–æ–º–∞—Ä—É –ø—Ä–æ—Ñ–∏–ª—å' - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å\n"
        "'—Å–º–µ–Ω–∏—Ç—å –Ω–∏–∫ &lt;–Ω–∏–∫&gt;' - –°–º–µ–Ω–∞ –Ω–∏–∫–∞ –≤ –ø—Ä–æ—Ñ–∏–ª–µ.\n"
        "'–∫–æ–º–∞—Ä—É', '–ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É', '–∫–∞–º–∞—Ä' - –ò—Å–∫–∞—Ç—å –∫–æ—Ç–æ–≤ –∏ —Å–æ–±–∏—Ä–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏\n"
    )

    keyboard = InlineKeyboardMarkup(row_width=1)
    button1 = InlineKeyboardButton(text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ",
                                   url="https://telegra.ph/Polzovatelskoe-soglashenie-06-17-6")
    button2 = InlineKeyboardButton(text="–ù–∞—à –∫–∞–Ω–∞–ª", url="t.me/komaru_updates")
    keyboard.add(button1, button2)

    await bot.send_message(message.chat.id, help_text, parse_mode='HTML', reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data.startswith('premium_callback'))
async def buy_premium(call):
    unique_id = call.data.split('_')[-1]
    if unique_id not in user_button or user_button[unique_id] != call.from_user.id:
        await bot.answer_callback_query(call.id, random.choice(responses), show_alert=True)
        return

    try:
        if call.message.chat.type == "private":
            await send_payment_method_selection(call.from_user.id, unique_id)
        else:
            try:
                await send_payment_method_selection(call.from_user.id, unique_id)
                await bot.send_message(call.message.chat.id, "–í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
            except telebot.apihelper.ApiException:
                await bot.answer_callback_query(call.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É —á—Ç–æ-—Ç–æ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.",
                                                show_alert=True)
    except Exception as e:
        await bot.answer_callback_query(call.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É —á—Ç–æ-—Ç–æ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.",
                                        show_alert=True)
        logging.error(f"Error in buy_premium: {e}")


async def send_payment_method_selection(user_id, unique_id):
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    stars_button = types.InlineKeyboardButton(text="Telegram Stars", callback_data=f"pay_stars_{unique_id}")
    crypto_button = types.InlineKeyboardButton(text="CryptoBot", callback_data=f"pay_crypto_{unique_id}")
    keyboard.add(stars_button, crypto_button)
    await bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –ø—Ä–µ–º–∏—É–º–∞:", reply_markup=keyboard)


prices = [LabeledPrice(label="25 Stars", amount=25)]


@bot.callback_query_handler(func=lambda call: call.data.startswith('pay_stars_'))
async def pay_with_stars(call):
    unique_id = call.data.split('_')[-1]
    if unique_id not in user_button or user_button[unique_id] != call.from_user.id:
        await bot.answer_callback_query(call.id, random.choice(responses), show_alert=True)
        return

    try:
        markup = InlineKeyboardMarkup()
        pay_button = InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å", pay=True)
        markup.add(pay_button)

        await bot.send_invoice(
            call.from_user.id,
            title="–ü–æ–∫—É–ø–∫–∞ –ø—Ä–µ–º–∏—É–º–∞",
            description=f"üîì –ö–æ–º–∞—Ä—É –ø—Ä–µ–º–∏—É–º:\n\n‚åõÔ∏è –ö–∞—Ä—Ç–æ—á–∫–∏ –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞\nüÉè –®–∞–Ω—Å –Ω–∞ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ –∏ –º–∏—Ñ–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç—ã\nüåê –°–º–∞–π–ª–∏–∫–∏ –≤ –Ω–∏–∫–Ω–µ–π–º–µ\nüíé –ê–ª–º–∞–∑ –≤ —Ç–æ–ø–µ\nüîÑ –ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π\nüóì –î–µ–π—Å—Ç–≤—É–µ—Ç 30 –¥–Ω–µ–π\n\n",
            provider_token=None,
            currency='XTR',
            prices=prices,
            start_parameter='purchase-stars',
            invoice_payload='stars-invoice',
            reply_markup=markup
        )
        await bot.delete_message(call.message.chat.id, call.message.message_id)
    except Exception as e:
        await bot.send_message(call.from_user.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        logging.error(f"Error in pay_with_stars: {e}")


@bot.pre_checkout_query_handler(func=lambda query: True)
async def checkout(pre_checkout_query):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


@bot.message_handler(content_types=['successful_payment'])
async def got_payment(message):
    await activate_premium(message.from_user.id, 30)
    await bot.send_message(message.chat.id,
                           'üåü –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É –ü—Ä–µ–º–∏—É–º–∞! –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞–º–∏.')


@bot.callback_query_handler(func=lambda call: call.data.startswith('pay_crypto_'))
async def pay_with_crypto(call):
    unique_id = call.data.split('_')[-1]
    if unique_id not in user_button or user_button[unique_id] != call.from_user.id:
        await bot.answer_callback_query(call.id, random.choice(responses), show_alert=True)
        return

    await create_and_send_invoice(call.from_user.id, unique_id)


async def create_and_send_invoice(user_id, unique_id):
    try:
        invoice = await crypto.create_invoice(asset='USDT', amount=0.5)
        if not invoice:
            response = "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            await bot.send_message(user_id, response)
            return None

        markup = types.InlineKeyboardMarkup()
        pay_button = types.InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å", url=invoice.bot_invoice_url)
        paid_button = types.InlineKeyboardButton(text="–Ø –æ–ø–ª–∞—Ç–∏–ª",
                                                 callback_data=f"verify_payment_{unique_id}_{invoice.invoice_id}")
        markup.add(pay_button, paid_button)

        response = (
            f"üîì –ß—Ç–æ –¥–∞—Å—Ç —Ç–µ–±–µ –ö–æ–º–∞—Ä—É –ø—Ä–µ–º–∏—É–º?\n\n"
            f"‚åõÔ∏è –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞ –≤–º–µ—Å—Ç–æ 4\n"
            f"üÉè –ü–æ–≤—ã—à–µ–Ω–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã–ø–∞–¥–µ–Ω–∏—è –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã—Ö –∏ –º–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –∫–∞—Ä—Ç\n"
            f"üåê –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–º–∞–π–ª–∏–∫–∏ –≤ –Ω–∏–∫–Ω–µ–π–º–µ\n"
            f"üíé –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–ª–º–∞–∑–∞ –≤ —Ç–æ–ø–µ –∫–∞—Ä—Ç–æ—á–µ–∫\n"
            f"üîÑ –ë–æ–ª–µ–µ –±—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–≤–æ–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            f"üóìÔ∏è –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è 30 –¥–Ω–µ–π\n\n"
            f"–ü—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã. –†–µ–∫–≤–∏–∑–∏—Ç—ã: {invoice.bot_invoice_url}"
        )
        await bot.send_message(user_id, response, reply_markup=markup)
        return invoice
    except Exception as e:
        error_message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞: {e}"
        await bot.send_message(user_id, error_message)
        return None


@bot.callback_query_handler(func=lambda call: call.data.startswith('verify_payment'))
async def verify_payment(call):
    parts = call.data.split('_')
    if len(parts) < 4:
        await bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞.")
        return

    action, context, unique_id, invoice = parts[0], parts[1], parts[2], parts[3]

    if unique_id not in user_button or user_button[unique_id] != call.from_user.id:
        await bot.answer_callback_query(call.id, random.choice(responses), show_alert=True)
        return

    try:
        print("Invoice ID:", invoice)
        payment_status = await get_invoice_status(invoice)
        if payment_status == 'paid':
            await activate_premium(call.from_user.id, 30)
            await bot.send_message(call.from_user.id,
                                   "üåü –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É –ü—Ä–µ–º–∏—É–º–∞! –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞–º–∏.")
            await bot.delete_message(call.message.chat.id, call.message.message_id)
        else:
            await bot.send_message(call.from_user.id, "–û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    except Exception as e:
        await bot.send_message(call.from_user.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}")


async def get_invoice_status(invoice_id):
    try:
        print(invoice_id)
        invoice = await crypto.get_invoices(invoice_ids=int(invoice_id))
        return invoice.status
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–≤–æ–π—Å–∞: {e}")
        return None


async def activate_premium(user_id, days):
    try:
        user = await bot.get_chat(user_id)
        if user is None:
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å user_id {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        premium_duration = timedelta(days=days)
        async with aiofiles.open('premium_users.json', 'r+') as file:
            data = json.loads(await file.read())
            if str(user_id) in data:
                current_expiration = datetime.strptime(data[str(user_id)], '%Y-%m-%d')
                new_expiration_date = current_expiration + premium_duration
            else:
                new_expiration_date = datetime.now() + premium_duration

            data[str(user_id)] = new_expiration_date.strftime('%Y-%m-%d')
            await file.seek(0)
            await file.write(json.dumps(data, ensure_ascii=False, indent=4))
            await file.truncate()
    except telebot.apihelper.ApiException as e:
        print(f"–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Å–∞: {e}")
        await bot.send_message(user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def check_and_update_premium_status(user_id):
    async with aiofiles.open('premium_users.json', 'r') as file:
        premium_users = json.loads(await file.read())

    if str(user_id) in premium_users:
        expiration_date = datetime.strptime(premium_users[str(user_id)], '%Y-%m-%d')
        if expiration_date > datetime.now():
            return True, expiration_date.strftime('%Y-%m-%d')
        else:
            del premium_users[str(user_id)]
            async with aiofiles.open('premium_users.json', 'w') as file:
                await file.write(json.dumps(premium_users, ensure_ascii=False, indent=4))
            return False, None
    else:
        return False, None


async def register_user_and_group_async(message):
    chat_type = message.chat.type
    update_data = {}

    if chat_type == 'private':
        user_info = {
            "user_id": message.from_user.id,
            "username": message.from_user.username or "",
            "first_name": message.from_user.first_name or ""
        }
        user_key = str(message.from_user.id)
        update_data['users'] = {user_key: user_info}

    if chat_type in ['group', 'supergroup']:
        group_info = {
            "group_id": message.chat.id,
            "title": message.chat.title
        }
        group_key = str(message.chat.id)
        update_data['groups'] = {group_key: group_info}

    try:
        async with aiofiles.open("user_group_data.json", "r") as file:
            data = await file.read()
            data = json.loads(data)
    except FileNotFoundError:
        data = {"users": {}, "groups": {}}

    updated = False
    for section, items in update_data.items():
        for key, info in items.items():
            if key not in data[section]:
                data[section][key] = info
                updated = True
    if updated:
        async with aiofiles.open("user_group_data.json", "w") as file:
            await file.write(json.dumps(data, indent=4))


async def changeNickname(message):
    user_id = message.from_user.id
    data = await load_data_cards()
    first_name = message.from_user.first_name
    premium_status, _ = await check_and_update_premium_status(str(user_id))
    user_data = data.get(str(user_id),
                         {'cats': [], 'last_usage': 0, 'points': 0, 'nickname': first_name, 'card_count': 0})
    text = registr(message.text)
    parts = text.split('—Å–º–µ–Ω–∏—Ç—å –Ω–∏–∫', 1)

    if len(parts) > 1 and parts[1].strip():
        new_nick = parts[1].strip()

        if len(new_nick) > 64:
            await bot.send_message(message.chat.id, "–ù–∏–∫–Ω–µ–π–º –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 64 —Å–∏–º–≤–æ–ª–æ–≤.")
            return

        if not premium_status and any(emoji.is_emoji(char) for char in new_nick):
            await bot.send_message(message.chat.id,
                                   "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç–º–æ–¥–∑–∏ –≤ –Ω–∏–∫–µ. –ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø—Ä–µ–º–∏—É–º –≤ –ø—Ä–æ—Ñ–∏–ª–µ!")
            return

        if any(entity.type == 'url' for entity in message.entities or []):
            await bot.send_message(message.chat.id, "–ù–∏–∫–Ω–µ–π–º –Ω–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å—Å—ã–ª–∫–∏.")
            return

        if '@' in new_nick:
            await bot.send_message(message.chat.id, "–ù–∏–∫–Ω–µ–π–º –Ω–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —é–∑–µ—Ä–Ω–µ–π–º—ã.")
            return

        user_data['nickname'] = new_nick
        data[str(user_id)] = user_data
        await save_data(data)
        await bot.send_message(message.chat.id, f"–í–∞—à –Ω–∏–∫–Ω–µ–π–º –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_nick}.")
    else:
        await bot.send_message(message.chat.id, "–ù–∏–∫–Ω–µ–π–º –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –£–∫–∞–∂–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.")


last_request_time = {}


async def last_time_usage(user_id):
    current_time = time.time()
    if user_id in last_request_time and (current_time - last_request_time[user_id]) < 2:
        return False
    last_request_time[user_id] = current_time
    return True


@bot.message_handler(commands=['admin_panel'])
async def admin_panel(message):
    if message.from_user.id not in [1130692453, 1268026433]:
        await bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        parts = message.text.split(' ', 3)
        if len(parts) < 4:
            await bot.reply_to(message,
                               "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /admin_panel <action> <–ª—Å/–≥—Ä—É–ø–ø–∞> <—Ç–µ–∫—Å—Ç> <–∫–Ω–æ–ø–∫–∞ —Å —Å—Å—ã–ª–∫–æ–π[—Å—Å—ã–ª–∫–∞]>")
            return

        action = parts[1]
        target = parts[2]
        rest = parts[3]

        text_start = rest.find('<') + 1
        text_end = rest.find('>')
        if text_start == 0 or text_end == -1:
            await bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–∫—Å—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <—Ç–µ–∫—Å—Ç>")
            return

        text = rest[text_start:text_end]
        button_text = None
        button_url = None

        button_start = rest.find('<', text_end + 1)
        button_end = rest.find('>', button_start + 1)
        if button_start != -1 and button_end != -1:
            button_text_url = rest[button_start + 1:button_end]
            button_text, button_url = button_text_url.split('[')
            button_url = button_url.strip(']')

        async with aiofiles.open("user_group_data.json", "r") as file:
            data = json.loads(await file.read())

        if target == '–≥—Ä—É–ø–ø–∞':
            targets = data.get('groups', {}).keys()
        elif target == '–ª—Å':
            targets = data.get('users', {}).keys()
        else:
            await bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø–æ–ª—É—á–∞—Ç–µ–ª—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–≥—Ä—É–ø–ø–∞' –∏–ª–∏ '–ª—Å'.")
            return

        keyboard = None
        if button_text and button_url:
            keyboard = types.InlineKeyboardMarkup()
            button = types.InlineKeyboardButton(text=button_text, url=button_url)
            keyboard.add(button)

        for chat_id in targets:
            try:
                await bot.send_message(chat_id, text, reply_markup=keyboard)
            except Exception as e:
                logging.error(f"Error sending message to {chat_id}: {e}")

        await bot.reply_to(message, f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–æ—Å–ª–∞–Ω–æ –ø–æ {target}.")

    except Exception as e:
        await bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


from datetime import datetime

send_files_task = None
authorized_users = {1268026433, 1130692453}
receivers = [-1002169656453]


@bot.message_handler(commands=['send_aiofiles_start'])
async def start_sending_files(message):
    if message.from_user.id in authorized_users:
        global send_files_task
        if send_files_task is None:
            send_files_task = asyncio.create_task(send_files_periodically())
            await bot.reply_to(message, "–ù–∞—á–∏–Ω–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–∞–π–ª–æ–≤ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç.")
        else:
            await bot.reply_to(message, "–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.")
    else:
        await bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")


@bot.message_handler(commands=['send_aiofiles_stop'])
async def stop_sending_files(message):
    if message.from_user.id in authorized_users:
        global send_files_task
        if send_files_task is not None:
            send_files_task.cancel()
            send_files_task = None
            await bot.reply_to(message, "–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
        else:
            await bot.reply_to(message, "–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ –Ω–µ –±—ã–ª–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.")
    else:
        await bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")


def count_elements_in_json(file_path):
    try:
        with open(file_path, 'r', encoding='utf-8') as file:
            data = json.load(file)
            return len(data)
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        return 0


async def send_files_periodically():
    try:
        while True:
            current_date = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            file_paths = ['premium_users.json', 'komaru_user_cards.json', 'promo.json', 'user_group_data.json']
            for user_id in receivers:
                for file_path in file_paths:
                    if os.path.exists(file_path):
                        with open(file_path, 'rb') as file:
                            await bot.send_document(user_id, file)
                users = count_elements_in_json("komaru_user_cards.json")
                await bot.send_message(user_id, f"–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {current_date}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users}")
            await asyncio.sleep(600)
    except asyncio.CancelledError:
        print("–ó–∞–¥–∞—á–∞ –ø–æ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–æ–≤ –±—ã–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


@bot.message_handler(func=lambda message: True)
async def handle_text(message):
    try:
        text = registr(message.text)
        if text in ["–∫–æ–º–∞—Ä—É", "–ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É", "–∫–∞–º–∞—Ä", "–∫–∞–º–∞—Ä—É"]:
            if await last_time_usage(message.from_user.id):
                await send_card_button(message)
        elif text in ["/profile", "–ø—Ä–æ—Ñ–∏–ª—å", "–∫–æ–º–∞—Ä—É –ø—Ä–æ—Ñ–∏–ª—å", "–∫–∞–º–∞—Ä—É –ø—Ä–æ—Ñ–∏–ª—å"]:
            if await last_time_usage(message.from_user.id):
                await user_profile(message)
        elif text in ["/start", "/start@komarucardsbot"]:
            if await last_time_usage(message.from_user.id):
                await start(message)
        elif text in ["/help", "/help@komarucardsbot"]:
            if await last_time_usage(message.from_user.id):
                await help(message)
        elif text.startswith('—Å–º–µ–Ω–∏—Ç—å –Ω–∏–∫'):
            if await last_time_usage(message.from_user.id):
                await changeNickname(message)
        elif text.startswith('–ø—Ä–æ–º–æ '):
            if await last_time_usage(message.from_user.id):
                await promo(message)
        elif text in ["/privacy", "/privacy@komarucardsbot"]:
            if await last_time_usage(message.from_user.id):
                keyboard = types.InlineKeyboardMarkup(row_width=2)
                button_1 = types.InlineKeyboardButton(text="–ù–∞—à–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ",
                                                      url="https://telegra.ph/Polzovatelskoe-soglashenie-06-17-6")
                keyboard.add(button_1)
                await bot.send_message(message.chat.id,
                                       "–ú—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å—Ç—Ä–æ–≥–æ –≤ —Ü–µ–ª—è—Ö —É–ª—É—á—à–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤–∫–ª—é—á–∞—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (user ID) –∏ –∏–º—è (first name), –Ω–µ –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–Ω—ã —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –≤–Ω–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —É–ª—É—á—à–µ–Ω–∏—è –±–æ—Ç–∞. –ù–∞—à –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç ‚Äî –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—É—é –≤—ã –Ω–∞–º –¥–æ–≤–µ—Ä—è–µ—Ç–µ.\n\n–î–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏ –Ω–∞—à–µ–π —Ä–∞–±–æ—Ç—ã, –º—ã —Ç–∞–∫–∂–µ –æ–±—è–∑—É–µ–º—Å—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–æ—Å—Ç—É–ø –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–º, –∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã –∏ –∫–∞–∫ –æ–Ω–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è. –í —Å–ª—É—á–∞–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–∏—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö, –º—ã —Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è. –ú—ã –ø—Ä–∏–ª–∞–≥–∞–µ–º –≤—Å–µ —É—Å–∏–ª–∏—è, —á—Ç–æ–±—ã –Ω–∞—à —Å–µ—Ä–≤–∏—Å –±—ã–ª –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –∏ —É–¥–æ–±–Ω—ã–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
                                       reply_markup=keyboard)
    except Exception as e:
        await bot.send_message(message.chat.id, "–í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.")
        await bot.send_message(1130692453,
                               f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã: –≤ —á–∞—Ç–µ: {message.chat.id}. –û—à–∏–±–∫–∞: {e}")
        await bot.send_message(1268026433,
                               f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã: –≤ —á–∞—Ç–µ: {message.chat.id}. –û—à–∏–±–∫–∞: {e}")
        await bot.send_message(-1002202469628,
                               f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã: –≤ —á–∞—Ç–µ: {message.chat.id}. –û—à–∏–±–∫–∞: {e}")


async def send_card_button(message):
    user_id = str(message.from_user.id)
    data = await load_data_cards()
    user_data = data.get(user_id, {'last_usage': 0})

    time_since_last_usage = time.time() - user_data['last_usage']
    premium_status, _ = await check_and_update_premium_status(user_id)
    wait_time = 14400 if not premium_status else 10800

    if time_since_last_usage < wait_time:
        remaining_time = wait_time - time_since_last_usage
        remaining_hours = int(remaining_time // 3600)
        remaining_minutes = int((remaining_time % 3600) // 60)
        remaining_seconds = int(remaining_time % 60)
        await bot.reply_to(message,
                           f"‚ú®–í—ã –æ—Å–º–æ—Ç—Ä–µ–ª–∏—Å—å, –Ω–æ –Ω–µ —É–≤–∏–¥–µ–ª–∏ —Ä—è–¥–æ–º –ö–æ–º–∞—Ä—É.\nüîç –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ {remaining_hours} —á–∞—Å–æ–≤ {remaining_minutes} –º–∏–Ω—É—Ç {remaining_seconds} —Å–µ–∫—É–Ω–¥.")
    else:
        keyboard = types.InlineKeyboardMarkup()
        unique_id = str(random.randint(100000, 999999))
        user_button[unique_id] = user_id
        logging.info(f"send_card_button: unique_id={unique_id}, user_id={user_id}")
        button = types.InlineKeyboardButton(text="üêæ –¢–∞–ø üÉè", callback_data=f"get_card_{unique_id}")
        keyboard.add(button)
        sent_message = await bot.send_message(message.chat.id, "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É:",
                                              reply_markup=keyboard)
        await asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id, 35))


async def delete_message_after_delay(chat_id, message_id, delay):
    await asyncio.sleep(delay)
    try:
        await bot.delete_message(chat_id, message_id)
    except Exception as e:
        pass


@bot.callback_query_handler(func=lambda call: call.data.startswith('get_card_'))
async def handle_get_card(call):
    unique_id = str(call.data.split('_')[-1])
    logging.info(f"handle_get_card: unique_id={unique_id}, user_id={call.from_user.id}")
    if unique_id not in user_button or user_button[unique_id] != str(call.from_user.id):
        await bot.answer_callback_query(call.id, random.choice(responses), show_alert=True)
        return
    await komaru_cards_function(call)


async def main():
    config_data = await config_func()
    global cats
    cats = config_data['cats']
    await bot.infinity_polling(timeout=10, request_timeout=120)


import asyncio

if __name__ == "__main__":
    asyncio.run(main())
